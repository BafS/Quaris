swagger: '2.0'
info:
  title: Quaris
  description: Quaris API specification
  version: "0.1.0"
host: api.quaris.com
basePath: /v1
schemes:
  - https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    description: JWT token that identifies the application sending the request
    in: header
produces:
  - application/json
paths:
  /registrations:
    get:
      produces:
        - application/json
      responses:
        200:
          description: List all registered applications
          schema:
            title: Registration summary
            type: array
            items:
              $ref: '#/definitions/RegistrationSummaryDTO'
    post:
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          description: The info required to register an application
          schema:
            $ref: '#/definitions/RegistrationDTO'
          required: true
      responses:
        201:
          description: Register a new application

  /auth:
    post:
      operationId: authenticateApplicationAndGetToken
      consumes:
      - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The info required to authenticate an application
          schema:
            $ref: '#/definitions/CredentialsDTO'
          required: true
      responses:
        204:
          description: Authentication sucessful
          schema:
            $ref: '#/definitions/TokenDTO'
        401:
          description: Authentication failed

  /users:
    get:
      description: Retrieve all users
      operationId: findAllUser
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: Returns the specified user details
          schema:
            type: array
            items:
              $ref: '#/definitions/UserDetailsDTO'
        404:
          description: No users found

  /users/{id}:
    get:
      description: Retrieve one user by identifier
      operationId: findUserById
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: id of the user to fetch
          required: true
          type: string
      produces:
        - application/json
      responses:
        200:
          description: Returns the specified user details
          schema:
            $ref: '#/definitions/UserDetailsDTO'
        404:
          description: User not found

  /badges:
    get:
      summary: All Badges
      description: The Badges endpoint returns information about all the badges existing.
      security:
        - Bearer: []
      tags:
        - Badge
      responses:
        200:
          description: Badge's information
          schema:
            type: array
            items:
              $ref: '#/definitions/BadgeDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
    post:
      summary: Create a new Badge
      description: Create a new Badge.
      security:
        - Bearer: []
      parameters:
        - name: badge
          in: body
          description: Badge to add
          required: true
          schema:
            $ref: '#/definitions/BadgeDTO'
      tags:
        - Badge
      responses:
        201:
          description: Badge was created
        409:
          description: Conflict, the badge name already exists
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /badges/{badgename}:
    get:
        summary: Badge Information
        description: |
          The Badge Information endpoint returns information about the given badge.
        security:
          - Bearer: []
        parameters:
          - name: badgename
            in: path
            description: A specific Badge's name
            required: true
            type: string
        tags:
          - Badge
        responses:
          200:
            description: Badge object
            schema:
              $ref: '#/definitions/BadgeDTO'
          404:
            description: Badge not found
          default:
            description: Unexpected error
            schema:
              $ref: '#/definitions/ErrorDTO'

  /events:
    post:
      summary: Create a new event
      description: When an event happens on the client side, an Event object is posted to the
        API.
      operationId: reportEvent
      consumes:
        - application/json
      security:
        - Bearer: []
      parameters:
        - name: event
          in: body
          description: Event to add
          required: true
          schema:
            $ref: '#/definitions/EventDTO'
      tags:
        - Event
      responses:
        202:
          description: Event was accepted
          schema:
            $ref: '#/definitions/EventDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'

  /rules:
    get:
      summary: All Rules
      description: The Rules endpoint returns information about all the existing rules.
      security:
        - Bearer: []
      tags:
        - Rule
      responses:
        200:
          description: Rules' information
          schema:
            type: array
            items:
              $ref: '#/definitions/RuleDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
    post:
      summary: Create a new Rule
      description: Create a new Rule.
      security:
        - Bearer: []
      parameters:
        - name: rule
          in: body
          description: Rule to add
          required: true
          schema:
            $ref: '#/definitions/RuleDTO'
      tags:
        - Rule
      responses:
        201:
          description: Rule was created
        409:
          description: Conflict, the rule name already exists
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /rules/{id}:
    put:
      summary: Modify existing Rule
      description: Modify an existing Rule
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Rule id
          required: true
          type: string
        - name: data
          in: body
          description: new Rule data
          required: true
          schema:
            $ref: '#/definitions/RuleDTO'
      tags:
        - Rule
      responses:
        200:
          description: Rule modified successfully
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
    delete:
      summary: Delete an existing Rule
      description: Delete an existing Rule
      security:
        - Bearer: []
      parameters:
        - name: id
          in: path
          description: Rule id
          required: true
          type: string
      tags:
        - Rule
      responses:
        204:
          description: Rule deleted successfully
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'

  /scales:
    get:
      summary: All Scales
      description: The Scales endpoint returns information about all the existing scales.
      security:
        - Bearer: []
      tags:
        - Scale
      responses:
        200:
          description: Scales' information
          schema:
            type: array
            items:
              $ref: '#/definitions/ScaleDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
    post:
      summary: Create a new Scale
      description: Create a new Scale.
      security:
        - Bearer: []
      parameters:
        - name: scale
          in: body
          description: Scale to add
          required: true
          schema:
            $ref: '#/definitions/ScaleDTO'
      tags:
        - Scale
      responses:
        201:
          description: Scale was created
        409:
          description: Conflict, the Scale name already exists
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'

  /points:
    get:
      summary: All Scales
      description: The Scales endpoint returns information about all the points.
      security:
        - Bearer: []
      tags:
        - Point
      responses:
        200:
          description: Points information
          schema:
            type: array
            items:
              $ref: '#/definitions/PointDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'
  /points/{identifier}:
    get:
      summary: All Scales
      description: The Scales endpoint returns information about all the existing scales.
      security:
        - Bearer: []
      parameters:
        - name: identifier
          in: path
          description: Identifier
          required: true
          type: string
      tags:
        - Point
      responses:
        200:
          description: User's scales information
          schema:
            type: array
            items:
              $ref: '#/definitions/PointDTO'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/ErrorDTO'

definitions:
  UserDTO:
    type: object
    properties:
      userId:
        type: string
      numberOfEvents:
        type: integer
      creationDate:
        type: string
        format: date
  UserDetailsDTO:
    type: object
    properties:
      user:
        $ref: '#/definitions/UserDTO'
      badges:
        type: array
        items:
          $ref: '#/definitions/BadgeDTO'
      scales:
        type: array
        items:
          $ref: '#/definitions/ScaleDTO'
  RegistrationSummaryDTO:
    type: object
    properties:
      applicationName:
        type: string
  RegistrationDTO:
    type: object
    properties:
      applicationName:
        type: string
      password:
        type: string
  CredentialsDTO:
    type: object
    properties:
      applicationName:
        type: string
      password:
        type: string
  TokenDTO:
    type: object
    properties:
      applicationName:
        type: string
  RuleDTO:
    type: object
    properties:
      id:
        type: integer
        format: int32
        description: Rule's ID.
      name:
        type: string
        description: Rule's name. Unique identifier.
      criteria:
        type: string
        description: Logical condition needed to apply the rule (javascript).
      action:
        type: string
        description: Action to take if condition is met (javascript).
      enabled:
        type: boolean
        description: If the Rule is enabled or not
  BadgeDTO:
    type: object
    properties:
      name:
        type: string
        description: Unique identifier representing the badge name.
      description:
        type: string
        description: Badge description
      icon:
        type: string
        format: binary
        description: Image associated to the badge
  AwardDTO:
    type: object
    properties:
      application:
        type: string
        description: Award from the given application
      user:
        $ref: '#/definitions/UserDTO'
      badge:
        $ref: '#/definitions/BadgeDTO'
      createdAt:
        type: string
        format: date-time
  ScaleDTO:
    type: object
    properties:
      name:
        type: string
        description: Scale's name
      description:
        type: string
        description: Scale's description
  PointDTO:
    type: object
    properties:
      point:
        type: integer
        format: int32
        description: Number of points
      user:
        $ref: '#/definitions/UserDTO'
      scale:
        $ref: '#/definitions/ScaleDTO'
  EventDTO:
    type: object
    properties:
      type:
        type: string
        description: Event's type
      identifier:
        type: string
        description: user identifier
      payload:
        type: object
        description: Parameters to use in rules (optional)
      createdAt:
        type: string
        format: date-time
      application:
        type: string
        description: Application name
  ErrorDTO:
    type: object
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
